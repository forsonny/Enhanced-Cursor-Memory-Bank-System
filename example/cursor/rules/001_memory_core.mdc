---
description: Core memory system that provides short-term and long-term memory capabilities for AI interactions
globs: alwaysApply: true
---

# Memory Core System

This rule establishes the foundation of the Enhanced Memory Bank System for Cursor. It enables the AI to maintain context across sessions through structured documentation.

## Configuration Loading

When starting work with a project, I MUST:

1. Check for the existence of `.cursor/memory/config.json`
2. If it exists, load and parse its content
3. Follow all settings defined in the configuration file
4. If it doesn't exist, use default settings

The configuration file contains critical settings that control:
- Memory retention periods
- Automatic loading behavior
- Event trigger definitions
- Mode-specific behaviors
- Memory file locations

## Memory System Architecture

The memory system functions on two distinct levels:

1. **Short-Term Memory**: Session-specific context that's active during the current development session
2. **Long-Term Memory**: Persistent knowledge that's maintained across all sessions

## Core Memory Principles

I follow these principles when working with the memory system:

- **Documentation First**: Every significant decision, pattern, or insight is documented
- **Memory Refresh**: I always load relevant memory when asked or when context requires
- **Consistent Updates**: Memory is updated when the user reports meaningful changes
- **Memory Hierarchy**: Information flows from short-term to long-term when appropriate
- **Single Source of Truth**: Memory files are the canonical reference for project understanding

## Memory Access Protocol

When I begin work, I will check for the existence of memory structures:

1. Look for `.cursor/memory/config.json` to load configuration
2. Ask to review `.cursor/memory/long_term/project_brief.md` to understand core project requirements
3. Ask to check `.cursor/memory/short_term/current_context.md` to understand the active development focus
4. Request access to relevant memory files based on the current task

If memory files don't exist, I will suggest creating them using the initialization script.

## Memory Storage Structure

The memory system is organized as follows:

```
.cursor/memory/
├── config.json
├── short_term/
│   ├── current_context.md     # What I'm currently working on
│   ├── working_decisions.md   # Temporary decisions being considered
│   └── session_notes.md       # Notes from the current session
└── long_term/
    ├── project_brief.md       # Core project definition
    ├── architecture.md        # System architecture
    ├── patterns.md            # Established patterns and conventions
    ├── decisions.md           # Important project decisions
    └── progress.md            # Development progress tracking
```

## Cursor Integration

Since I'm operating within Cursor, I have these file-related capabilities:

1. I can READ files that are open in the editor or explicitly loaded
2. I can SUGGEST changes to files which users can implement
3. I can REQUEST users to open specific files for context
4. I cannot directly write to files without user intervention
5. I cannot automatically detect file system events

When the memory commands suggest file operations, I will:
1. Provide clear instructions for what should be updated
2. Suggest the exact content that should be added/modified
3. Ask the user to confirm before making changes
4. Acknowledge when changes have been made

## Memory Initialization Checklist

When the memory system is first initialized in a project, I will guide the user to:

1. Run the initialization script to create the memory directory structure
2. Create initial versions of core memory files with appropriate templates
3. Input essential project information to populate project_brief.md
4. Set up initial patterns and conventions in patterns.md
5. Initialize progress.md with baseline project state

## Memory Maintenance Responsibilities

I maintain memory with these responsibilities:

- Help users keep memory files accurate and up-to-date
- Detect and resolve conflicts between memory files
- Suggest memory consolidation when related information is fragmented
- Maintain appropriate distinctions between short-term and long-term memory
- Help users maintain progress.md to reflect project development

## Memory System Variables

The memory system tracks these key variables in the config file:

- MEMORY_INITIALIZED: Whether memory has been fully initialized
- CURRENT_MODE: The active operational mode (Think/Plan/Implement/Review)
- MEMORY_LAST_UPDATED: Timestamp of last memory update
- CURRENT_TASK: Identifier for the active development task
- MEMORY_PRIORITY_AREAS: List of high-priority memory contexts

## Memory Status Assessment

I can help assess the overall health of the memory system by checking:

- Memory coverage of project components
- Recency of memory updates
- Consistency between related memory files
- Completeness of core memory files
- Accurate reflection of project state in progress.md
